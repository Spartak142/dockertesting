name: Java CI/CD

on:
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Check repo
        uses: actions/checkout@master
      - name: Set up JDK 14
        uses: actions/setup-java@master
        with:
          java-version: '14'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots package --file pom.xml
      - name: Create artifact dir and copy
        run: mkdir latest && cp target/*.jar latest
      - name: Save artifacts
        uses: actions/upload-artifact@master
        with:
          name: latest
          path: latest/
  deploy:
    name: Deploy
    needs: [build]
    runs-on: ubuntu-latest


    env:
      AWS_REGION: eu-north-1                  # set this to your preferred AWS region, e.g. us-west-1
      ECR_REPOSITORY: java-app                  # set this to your Amazon ECR repository name
      ECS_SERVICE: javaAppService                 # set this to your Amazon ECS service name
      ECS_CLUSTER: javaAppCluster                 # set this to your Amazon ECS cluster name
      ECS_TASK_DEFINITION: .aws/task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
      CONTAINER_NAME: javaAppContainer           # set this to the name of the container in the
                                               # containerDefinitions section of your task definitionjobs:

    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Download artifacts
      uses: actions/download-artifact@master
      with:
          name: latest
    - run: ls -l && pwd
    - run: echo ${{ secrets.AWS_ACCESS_KEY_ID }}
    
    - uses: aws-actions/configure-aws-credentials@master
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@main
        
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@master
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@master
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
